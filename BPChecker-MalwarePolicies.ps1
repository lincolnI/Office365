<#
    .Link
    Documentation - https://github.com/directorcia/patron/wiki/Getting-existing-malware-policies-and-comparing-to-best-practices
    Source - https://github.com/directorcia/patron/blob/master/o365-mx-malware-get.ps1

    .Description
    Gets existing malware policies and checks these against best practices

 
    .Notes
    Prerequisites = 1
        1. Ensure connected to Exchange Online

    If you have running scripts that don't have a certificate, run this command once to disable that level of security
    Set-Executionpolicy -ExecutionPolicy Bypass -Scope Currentuser -Force
    Set-Executionpolicy remotesigned

#>


#----------------------------------------------------------------
################# Variables ################
#----------------------------------------------------------------
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Output Colors
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$SystemMessageColor = "Cyan"
$ProcessMessageColor = "Green"
$OutputColor = "Green"
$InfoColor = "Yellow"
$ErrorMessageColor = "Red"
$WarningMessageColor = "Yellow"


#----------------------------------------------------------------


#----------------------------------------------------------------
################# Start of Script ################
#----------------------------------------------------------------
Clear-Host

Write-Host -ForegroundColor $systemmessagecolor "Script started`n"

<#      Get existing policies       #>
Write-host -ForegroundColor $systemmessagecolor "Check for existing policies`n"
$malwarepolicy = Get-malwareFilterPolicy
write-host -foregroundcolor $processmessagecolor "Total number of policies = ", $malwarepolicy.Count

Foreach ($policy in $malwarepolicy) {
    Write-Host "Policy Name = ", $policy.name
        if ($policy.action -ne "deletemessage"){            
        write-host -foregroundcolor $errormessagecolor "   Action not set to deletemessage"
    }
    else { 
            write-host -foregroundcolor $processmessagecolor "   Action set to deletemessage"
    }
    if ($policy.Enablefilefilter -ne $true){                         ## Common attachment blocking is enabled
        write-host -foregroundcolor $errormessagecolor "   Enable common attachment blocking not set to true"
    }
    else { 
        write-host -foregroundcolor $processmessagecolor "   Enable common attachment blocking set to true"
    }
    if ($policy.EnableInternalSenderAdminNotifications -ne $true){      ## Send notification messages to an administrator when malware is detected in messages from external senders
        write-host -foregroundcolor $errormessagecolor "   Enable internal sender admin notifications not set"
    }
    else {
        write-host -foregroundcolor $processmessagecolor "   Enable internal sender admin notifications set"
    }
    if ([string]::IsNullOrEmpty($policy.InternalSenderAdminAddress)){        ## Mail address of the administrator who will receive notifications messages when messages from external senders contain malware
        write-host -foregroundcolor $errormessagecolor "   Administrator notification list is empty"
    }
    else {
        write-host -foregroundcolor $processmessagecolor "   Administrator notification list = ", $policy.InternalSenderAdminAddress
    }
    if ($policy.Enableinternalsendernotifications -ne $true){                   ## Send notification messages to senders when malware is detected in messages from external senders
        write-host -foregroundcolor $errormessagecolor "   Enable internal sender notifications is not enabled"
    }
    else {
        write-host -foregroundcolor $processmessagecolor "   Enable internal sender notifications is enabled"
    }
    if ($policy.Zapenabled -ne "movetojmf" ){                       ## The ZapEnabled parameter specifies whether to enable zero-hour auto purge (ZAP). ZAP detects unread messages that have already been delivered to the user's Inbox. 
        write-host -foregroundcolor $errormessagecolor "   Zap action not enabled"
    }
    else {
        write-host -foregroundcolor $processmessagecolor "   Zap action enabled"
    }
    Write-Host
}

<#      Get existing rules       #>
Write-host -ForegroundColor $systemmessagecolor "Check for existing rules`n"
$ruleparams = get-malwarefilterrule
        
Foreach ($ruleparam in $ruleparams) {
    Write-Host -ForegroundColor $processmessagecolor "Rule Name = ", $ruleparam.name
    write-host -ForegroundColor $processmessagecolor "   Rule attached policy =", $ruleparam.malwarefilterpolicy
    write-host -ForegroundColor $processmessagecolor "   Protected domains = ", $ruleparam.recipientdomainis
    write-host -ForegroundColor $processmessagecolor "   Priority = ", $ruleparam.Priority
    if ($ruleparam.state -eq "enabled") {
        write-host -ForegroundColor $processmessagecolor "   Enabled = ", $ruleparam.state        
    } else {
        write-host -ForegroundColor $errormessagecolor "   Enabled = ", $ruleparam.state        
    }
    Write-Host
}


Write-Host -foregroundcolor $SystemMessageColor "`nScript complete`n"
#----------------------------------------------------------------